import java.util.Scanner;public class NotChessEngine{String[][] board = new String[8][8];int queen1 = 0; int queen2 = 0; int a1 = 0; int a2 = 0; int b1 = 0; int b2 = 0; int c1 = 0; int c2 = 0;public NotChessEngine(){run();}public void setUp(String piece){for(int r = 0; r < board[0].length; r++){for(int c = 0; c < board.length; c++){board[r][c] = "- ";}}queen1 = Roll(8); queen2 = Roll(8); a1 = Roll(8); a2 = Roll(8); b1 = Roll(8); b2 = Roll(8); c1 = Roll(8); c2 = Roll(8);while((queen1 == a1 && queen2 == a2 || queen1 == b1 && queen2 == b2 || queen1 == c2 && queen2 == c2) || (a1 == queen1 && a2 == queen2 || a1 == b2 && a2 == b2 || a1 == c1 && a2 == c2) || (b1 == queen1 && b2 == queen2 || b1 == a1 && b2 == a2 || b1 == c1 && b2 == c2) || (c1 == queen1 && c2 == queen2 || c1 == a1 && c2 == a2 || c1 == b1 && c2 == b2)){queen1 = Roll(8); queen2 = Roll(8); a1 = Roll(8); a2 = Roll(8); b1 = Roll(8); b2 = Roll(8); c1 = Roll(8); c2 = Roll(8);}board[queen1][queen2] = piece;board[a1][a2] = "A ";board[b1][b2] = "B ";board[c1][c2] = "C ";}public void QueenCheck(){int UpLeftX = Math.abs(queen1-a1);int UpLeftY = Math.abs(queen2-a2);if(queen1 == a1 || queen2 == a2 || (Math.abs(queen1-a1) == Math.abs(queen2-a2)))System.out.println("A can be reached by the queen");if(queen1 == b1 || queen2 == b2 || (Math.abs(queen1-b1) == Math.abs(queen2-b2)))System.out.println("B can be reached by the queen");if(queen1 == c1 || queen2 == c2 || (Math.abs(queen1-c1) == Math.abs(queen2-c2)))System.out.println("C can be reached by the queen");}public void RookCheck(){if(queen1 == a1 || queen2 == a2)System.out.println("A can be reached by the rook");if(queen1 == b1 || queen2 == b2)System.out.println("B can be reached by the rook");if(queen1 == c1 || queen2 == c2)System.out.println("C can be reached by the rook");}public void BishopCheck(){int UpLeftX = Math.abs(queen1-a1);int UpLeftY = Math.abs(queen2-a2);if(Math.abs(queen1-a1) == Math.abs(queen2-a2))System.out.println("A can be reached by the bishop");if((Math.abs(queen1-b1) == Math.abs(queen2-b2)))System.out.println("B can be reached by the bishop");if((Math.abs(queen1-c1) == Math.abs(queen2-c2)))System.out.println("C can be reached by the bishop");}public void KingCheck(){if(queen1+1 == a1 && queen2 == a2 || queen1-1 == a1 && queen2 == a2 || queen1 == a1 && queen2+1 == a2 || queen1 == a1 && queen2-1 == a2 || queen1+1 == a1 && queen2+1 == a2 || queen1-1 == a1 && queen2-1 == a2 || queen1-1 == a1 && queen2+1 == a2 || queen1+1 == a1 && queen2-1 == a2)System.out.println("A can be reached by King");if(queen1+1 == b1 && queen2 == b2 || queen1-1 == b1 && queen2 == b2 || queen1 == b1 && queen2+1 == b2 || queen1 == b1 && queen2-1 == b2 || queen1+1 == b1 && queen2+1 == b2 || queen1-1 == b1 && queen2-1 == b2 || queen1-1 == b1 && queen2+1 == b2 || queen1+1 == b1 && queen2-1 == b2)System.out.println("B can be reached by King");if(queen1+1 == c1 && queen2 == c2 || queen1-1 == c1 && queen2 == c2 || queen1 == c1 && queen2+1 == c2 || queen1 == c1 && queen2-1 == c2 || queen1+1 == c1 && queen2+1 == c2 || queen1-1 == c1 && queen2-1 == c2 || queen1-1 == c1 && queen2+1 == c2 || queen1+1 == c1 && queen2-1 == c2)System.out.println("C can be reached by King");}public void KnightCheck(){if(queen1+2 == a1 && queen2+1 == a2 || queen1+2 == a1 && queen2-1 == a2 || queen1+1 == a1 && queen2+2 == a2 || queen1+2 == a1 && queen2-1 == a2 || queen1-2 == a1 && queen2+1 == a2 || queen1-2 == a1 && queen2-1 == a2 || queen1+1 == a1 && queen2-2 == a2 || queen1-1 == a1 && queen2-2 == a2)System.out.println("A can be reached by the Knight");if(queen1+2 == b1 && queen2+1 == b2 || queen1+2 == b1 && queen2-1 == b2 || queen1+1 == b1 && queen2+2 == b2 || queen1+2 == b1 && queen2-1 == b2 || queen1-2 == b1 && queen2+1 == b2 || queen1-2 == b1 && queen2-1 == b2 || queen1+1 == b1 && queen2-2 == b2 || queen1-1 == b1 && queen2-2 == b2)System.out.println("B can be reached by the Knight");if(queen1+2 == c1 && queen2+1 == c2 || queen1+2 == c1 && queen2-1 == c2 || queen1+1 == c1 && queen2+2 == c2 || queen1+2 == c1 && queen2-1 == c2 || queen1-2 == c1 && queen2+1 == c2 || queen1-2 == c1 && queen2-1 == c2 || queen1+1 == c1 && queen2-2 == c2 || queen1-1 == c1 && queen2-2 == c2)System.out.println("C can be reached by the Knight");}public void PawnCheck(){if(queen1+1 == a1 && queen1+1 == a1 || queen1-1 == a1 && queen1+1 == a1)System.out.println("A can be reached by the Pawn");if(queen1+1 == a1 && queen1+1 == a1 || queen1-1 == a1 && queen1+1 == a1)System.out.println("B can be reached by the Pawn");if(queen1+1 == a1 && queen1+1 == a1 || queen1-1 == a1 && queen1+1 == a1)System.out.println("C can be reached by the Pawn");}public void run(){Scanner input = new Scanner(System.in);System.out.println("Q queen, B bishop, R rook, K knight, P pawn, k king");String piece = input.next();if(piece.equals("Q") || piece.equals("q")){setUp("Q ");displayBoard();QueenCheck();}else if(piece.equals("R") || piece.equals("r")){setUp("R ");displayBoard();RookCheck();}else if(piece.equals("B") || piece.equals("b")){setUp("b ");displayBoard();BishopCheck();}else if(piece.equals("k")){setUp("K ");displayBoard();KingCheck();}else if(piece.equals("K")){setUp("K ");displayBoard();KnightCheck();}else if(piece.equals("P") || piece.equals("p")){setUp("P ");displayBoard();PawnCheck();}}public int Roll(int sides){return (int)(Math.random() * sides);}public void displayBoard(){for(int r = 0; r < board[0].length; r++){for(int c = 0; c < board.length; c++){System.out.print(board[r][c]);}System.out.println();}}public static void main(String[] args){NotChessEngine app = new NotChessEngine();}}